def reconstruct_flag_from_png(input_file, output_file):
    with open(input_file, "rb") as infile:
        data = infile.read()

        # Extract the appended bytes (assuming they are the last 26 bytes)
        if len(data) < 26:
            print("Error: Input file does not contain enough data.")
            return
        
        appended_data = data[-78:-50]  # Last 26 bytes are the appended ones
        print(appended_data)
        # Initialize the reconstructed flag
        flag = [0] * 26

        # Step 1: Directly copy the first 4 bytes
        flag[0:4] = appended_data[0:4]

        # Step 2: Copy bytes 5 and 6 (indices 4 and 5 in flag)
        flag[4] = appended_data[4]
        flag[5] = appended_data[5]

        # Step 3: Reverse the transformation on bytes 6-14
        for i in range(6, 15):
            flag[i] = (appended_data[i] - 5) & 0xFF  # Subtract 5 and handle byte overflow

        # Step 4: Reverse the transformation on byte 15
        flag[15] = (appended_data[15] + 3) & 0xFF  # Add 3 and handle byte overflow

        # Step 5: Copy bytes 16-25
        flag[16:26] = appended_data[16:26]

        # Convert to characters and write to the output file
        flag_text = ''.join(chr(byte) for byte in flag)
        with open(output_file, "w") as outfile:
            outfile.write(flag_text)

        print(f"Reconstructed flag saved to {output_file}")

# Example usage
reconstruct_flag_from_png("mystery.png", "reconstructed_flag.txt")

