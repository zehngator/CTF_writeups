import sys

def byte_to_bits(byte):
    """Converts a byte to a list of bits."""
    return [(byte >> i) & 1 for i in range(7, -1, -1)]

def bits_to_byte(bits):
    """Converts a list of bits back to a byte."""
    byte = 0
    for i, bit in enumerate(reversed(bits)):
        byte |= bit << i
    return byte

def reverse_binary_file(input_file, output_file="reversed"):
    try:
        with open(input_file, "rb") as infile:
            byte_list = list(infile.read())
        
        # Convert each byte to bits and flatten into a single list of bits
        bit_list = []
        for byte in byte_list:
            bit_list.extend(byte_to_bits(byte))

        # Reverse the entire bit list
        bit_list.reverse()

        # Group bits back into bytes and write to the output file
        with open(output_file, "wb") as outfile:
            for i in range(0, len(bit_list), 8):
                byte = bits_to_byte(bit_list[i:i+8])
                outfile.write(bytes([byte]))

        print(f"File '{input_file}' processed successfully, output written to '{output_file}'.")
    except FileNotFoundError:
        print(f"Error: File '{input_file}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python reverse_binary.py <input_file>")
    else:
        input_file = sys.argv[1]
        reverse_binary_file(input_file)

